"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/remark-html";
exports.ids = ["vendor-chunks/remark-html"];
exports.modules = {

/***/ "(rsc)/../../node_modules/remark-html/lib/index.js":
/*!***************************************************!*\
  !*** ../../node_modules/remark-html/lib/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ remarkHtml)\n/* harmony export */ });\n/* harmony import */ var hast_util_sanitize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! hast-util-sanitize */ \"(rsc)/../../node_modules/hast-util-sanitize/lib/index.js\");\n/* harmony import */ var mdast_util_to_hast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mdast-util-to-hast */ \"(rsc)/../../node_modules/mdast-util-to-hast/lib/index.js\");\n/* harmony import */ var hast_util_to_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! hast-util-to-html */ \"(rsc)/../../node_modules/hast-util-to-html/lib/index.js\");\n/**\n * @typedef {import('hast-util-sanitize').Schema} Schema\n * @typedef {import('hast-util-to-html').Options} ToHtmlOptions\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-to-hast').Handlers} Handlers\n * @typedef {import('unified').Compiler<Root, string>} Compiler\n * @typedef {import('unified').Processor<undefined, undefined, undefined, Root, string>} Processor\n */\n\n/**\n * @typedef ExtraOptionsFields\n *   Extra fields.\n * @property {Readonly<Handlers> | null | undefined} [handlers]\n *   How to turn mdast nodes into hast nodes (optional);\n *   passed to `mdast-util-to-hast`.\n * @property {Readonly<Schema> | boolean | null | undefined} [sanitize]\n *   Sanitize the output, and how (default: `true`).\n *\n * @typedef {ToHtmlOptions & ExtraOptionsFields} Options\n *   Configuration.\n */\n\n\n\n\n\n/** @type {Readonly<Options>} */\nconst emptyOptions = {}\n\n/**\n * Serialize markdown as HTML.\n *\n * ###### Notes\n *\n * Passing `sanitize: false` is dangerous.\n * It allows arbitrary HTML and does not sanitize elements.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nfunction remarkHtml(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = this\n  const {handlers, sanitize: clean, ...toHtmlOptions} = options || emptyOptions\n  let allowDangerousHtml = false\n  /** @type {Readonly<Schema> | undefined} */\n  let schema\n\n  if (typeof clean === 'boolean') {\n    allowDangerousHtml = !clean\n  } else if (clean) {\n    schema = clean\n  }\n\n  self.compiler = compiler\n\n  /**\n   * @type {Compiler}\n   */\n  function compiler(tree, file) {\n    const hast = (0,mdast_util_to_hast__WEBPACK_IMPORTED_MODULE_0__.toHast)(tree, {handlers, allowDangerousHtml})\n    const safeHast = allowDangerousHtml ? hast : (0,hast_util_sanitize__WEBPACK_IMPORTED_MODULE_1__.sanitize)(hast, schema)\n    const result = (0,hast_util_to_html__WEBPACK_IMPORTED_MODULE_2__.toHtml)(safeHast, {...toHtmlOptions, allowDangerousHtml})\n\n    if (file.extname) {\n      file.extname = '.html'\n    }\n\n    // Add an eof eol.\n    return tree &&\n      tree.type === 'root' &&\n      result &&\n      /[^\\r\\n]/.test(result.charAt(result.length - 1))\n      ? result + '\\n'\n      : result\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzL3JlbWFyay1odG1sL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQSxhQUFhLHFDQUFxQztBQUNsRCxhQUFhLHFDQUFxQztBQUNsRCxhQUFhLHNCQUFzQjtBQUNuQyxhQUFhLHVDQUF1QztBQUNwRCxhQUFhLDBDQUEwQztBQUN2RCxhQUFhLDRFQUE0RTtBQUN6Rjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLHVDQUF1QztBQUNyRDtBQUNBO0FBQ0EsY0FBYywrQ0FBK0M7QUFDN0Q7QUFDQTtBQUNBLGFBQWEsb0NBQW9DO0FBQ2pEO0FBQ0E7O0FBRTJDO0FBQ0Y7QUFDRDs7QUFFeEMsV0FBVyxtQkFBbUI7QUFDOUI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsc0NBQXNDO0FBQ2pEO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDZTtBQUNmLGFBQWEsV0FBVztBQUN4QjtBQUNBO0FBQ0E7QUFDQSxTQUFTLDZDQUE2QztBQUN0RDtBQUNBLGFBQWEsOEJBQThCO0FBQzNDOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsaUJBQWlCLDBEQUFNLFFBQVEsNkJBQTZCO0FBQzVELGlEQUFpRCw0REFBUTtBQUN6RCxtQkFBbUIseURBQU0sWUFBWSxxQ0FBcUM7O0FBRTFFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYXNzaWUtZ3B0Ly4uLy4uL25vZGVfbW9kdWxlcy9yZW1hcmstaHRtbC9saWIvaW5kZXguanM/MmU0NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2hhc3QtdXRpbC1zYW5pdGl6ZScpLlNjaGVtYX0gU2NoZW1hXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdoYXN0LXV0aWwtdG8taHRtbCcpLk9wdGlvbnN9IFRvSHRtbE9wdGlvbnNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ21kYXN0JykuUm9vdH0gUm9vdFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWRhc3QtdXRpbC10by1oYXN0JykuSGFuZGxlcnN9IEhhbmRsZXJzXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCd1bmlmaWVkJykuQ29tcGlsZXI8Um9vdCwgc3RyaW5nPn0gQ29tcGlsZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3VuaWZpZWQnKS5Qcm9jZXNzb3I8dW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgUm9vdCwgc3RyaW5nPn0gUHJvY2Vzc29yXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiBFeHRyYU9wdGlvbnNGaWVsZHNcbiAqICAgRXh0cmEgZmllbGRzLlxuICogQHByb3BlcnR5IHtSZWFkb25seTxIYW5kbGVycz4gfCBudWxsIHwgdW5kZWZpbmVkfSBbaGFuZGxlcnNdXG4gKiAgIEhvdyB0byB0dXJuIG1kYXN0IG5vZGVzIGludG8gaGFzdCBub2RlcyAob3B0aW9uYWwpO1xuICogICBwYXNzZWQgdG8gYG1kYXN0LXV0aWwtdG8taGFzdGAuXG4gKiBAcHJvcGVydHkge1JlYWRvbmx5PFNjaGVtYT4gfCBib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZH0gW3Nhbml0aXplXVxuICogICBTYW5pdGl6ZSB0aGUgb3V0cHV0LCBhbmQgaG93IChkZWZhdWx0OiBgdHJ1ZWApLlxuICpcbiAqIEB0eXBlZGVmIHtUb0h0bWxPcHRpb25zICYgRXh0cmFPcHRpb25zRmllbGRzfSBPcHRpb25zXG4gKiAgIENvbmZpZ3VyYXRpb24uXG4gKi9cblxuaW1wb3J0IHtzYW5pdGl6ZX0gZnJvbSAnaGFzdC11dGlsLXNhbml0aXplJ1xuaW1wb3J0IHt0b0hhc3R9IGZyb20gJ21kYXN0LXV0aWwtdG8taGFzdCdcbmltcG9ydCB7dG9IdG1sfSBmcm9tICdoYXN0LXV0aWwtdG8taHRtbCdcblxuLyoqIEB0eXBlIHtSZWFkb25seTxPcHRpb25zPn0gKi9cbmNvbnN0IGVtcHR5T3B0aW9ucyA9IHt9XG5cbi8qKlxuICogU2VyaWFsaXplIG1hcmtkb3duIGFzIEhUTUwuXG4gKlxuICogIyMjIyMjIE5vdGVzXG4gKlxuICogUGFzc2luZyBgc2FuaXRpemU6IGZhbHNlYCBpcyBkYW5nZXJvdXMuXG4gKiBJdCBhbGxvd3MgYXJiaXRyYXJ5IEhUTUwgYW5kIGRvZXMgbm90IHNhbml0aXplIGVsZW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7UmVhZG9ubHk8T3B0aW9ucz4gfCBudWxsIHwgdW5kZWZpbmVkfSBbb3B0aW9uc11cbiAqICAgQ29uZmlndXJhdGlvbiAob3B0aW9uYWwpLlxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqICAgTm90aGluZy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVtYXJrSHRtbChvcHRpb25zKSB7XG4gIC8qKiBAdHlwZSB7UHJvY2Vzc29yfSAqL1xuICAvLyBAdHMtZXhwZWN0LWVycm9yOiBUUyBpbiBKU0RvYyBnZW5lcmF0ZXMgd3JvbmcgdHlwZXMgaWYgYHRoaXNgIGlzIHR5cGVkIHJlZ3VsYXJseS5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHVuaWNvcm4vbm8tdGhpcy1hc3NpZ25tZW50XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIGNvbnN0IHtoYW5kbGVycywgc2FuaXRpemU6IGNsZWFuLCAuLi50b0h0bWxPcHRpb25zfSA9IG9wdGlvbnMgfHwgZW1wdHlPcHRpb25zXG4gIGxldCBhbGxvd0Rhbmdlcm91c0h0bWwgPSBmYWxzZVxuICAvKiogQHR5cGUge1JlYWRvbmx5PFNjaGVtYT4gfCB1bmRlZmluZWR9ICovXG4gIGxldCBzY2hlbWFcblxuICBpZiAodHlwZW9mIGNsZWFuID09PSAnYm9vbGVhbicpIHtcbiAgICBhbGxvd0Rhbmdlcm91c0h0bWwgPSAhY2xlYW5cbiAgfSBlbHNlIGlmIChjbGVhbikge1xuICAgIHNjaGVtYSA9IGNsZWFuXG4gIH1cblxuICBzZWxmLmNvbXBpbGVyID0gY29tcGlsZXJcblxuICAvKipcbiAgICogQHR5cGUge0NvbXBpbGVyfVxuICAgKi9cbiAgZnVuY3Rpb24gY29tcGlsZXIodHJlZSwgZmlsZSkge1xuICAgIGNvbnN0IGhhc3QgPSB0b0hhc3QodHJlZSwge2hhbmRsZXJzLCBhbGxvd0Rhbmdlcm91c0h0bWx9KVxuICAgIGNvbnN0IHNhZmVIYXN0ID0gYWxsb3dEYW5nZXJvdXNIdG1sID8gaGFzdCA6IHNhbml0aXplKGhhc3QsIHNjaGVtYSlcbiAgICBjb25zdCByZXN1bHQgPSB0b0h0bWwoc2FmZUhhc3QsIHsuLi50b0h0bWxPcHRpb25zLCBhbGxvd0Rhbmdlcm91c0h0bWx9KVxuXG4gICAgaWYgKGZpbGUuZXh0bmFtZSkge1xuICAgICAgZmlsZS5leHRuYW1lID0gJy5odG1sJ1xuICAgIH1cblxuICAgIC8vIEFkZCBhbiBlb2YgZW9sLlxuICAgIHJldHVybiB0cmVlICYmXG4gICAgICB0cmVlLnR5cGUgPT09ICdyb290JyAmJlxuICAgICAgcmVzdWx0ICYmXG4gICAgICAvW15cXHJcXG5dLy50ZXN0KHJlc3VsdC5jaGFyQXQocmVzdWx0Lmxlbmd0aCAtIDEpKVxuICAgICAgPyByZXN1bHQgKyAnXFxuJ1xuICAgICAgOiByZXN1bHRcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/remark-html/lib/index.js\n");

/***/ })

};
;