import { config } from "dotenv";
import { access, writeFile } from "fs/promises";
import { basename, resolve } from "path";
import { logging } from "@/utils/logging";

const main = async () => {
  const keyEnv = config({ path: resolve(process.cwd(), '.env.key') });
  const DOTENV_KEY = keyEnv.parsed?.DOTENV_KEY || process.env.DOTENV_KEY; // If DOTENV_KEY not found in .env.key, get it from process.env
  if (!DOTENV_KEY) {
    throw new Error("No DOTENV_KEY found in .env.key or process.env");
  }

  const envPath = resolve(process.cwd(), '.env')
  const prodEnvPath = resolve(process.cwd(), '.env.production')
  const url = new URL(DOTENV_KEY); // Validate the URL
  const environment = url.searchParams.get('environment')
    
  let envPathExists = false
  try {    
    await access(envPath)
    envPathExists = true
  } catch (error) {
    // Do nothing
  }

  let prodEnvPathExists = false
  try {
    await access(prodEnvPath)
    prodEnvPathExists = true
  } catch (error) {
    // Do nothing
  }

  let targetEnvPath
  
  const envs = config({ DOTENV_KEY: process.env.DOTENV_KEY });
  if (!envs.parsed || Object.keys(envs.parsed).length === 0) {
    throw new Error("No .env.vault found or it is empty");
  }

  if (environment === "production") {
    if (prodEnvPathExists) {
      logging.log(`[remote-load-env.ts][INFO] ${basename(prodEnvPath)} already exists, skipping...`)
      return
    }

    console.log(1)
    targetEnvPath = prodEnvPath
  } else {
    if (envPathExists) {
      logging.log(`${envPath} already exists, skipping...`)
      return
    }

    console.log(2)
    targetEnvPath = envPath
  }

  try {
    logging.log(`Writing to ${targetEnvPath}`)
    await writeFile(
      targetEnvPath,
      // eslint-disable-next-line prefer-template
      `# ${environment}\n` +
      "# This file is generated by /scripts/load-env.ts\n" +
      "# DO NOT ATTEMPT TO EDIT THIS FILE\n" +
      Object.entries(envs.parsed)
          .map(([key, value]) => `${key}=${value}`)
          .join("\n")
    );
  } catch (error) {
    throw new Error(`Failed to write to ${targetEnvPath}`);
  }
};

main();